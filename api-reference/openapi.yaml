openapi: 3.0.1
info:
  title: AttentPublicAPI
  version: '2024-05-17T21:09:13Z'
servers:
  - url: https://api.attent.app/v1
paths:
  /leads/create:
    post:
      description: 'Creates a new lead'
      requestBody:
        description: 'Lead to create. Phone number must be unique.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/leadItem'
        required: true
      responses:
        200:
          description: 'A lead has been successfully created.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 'Returns `"Lead created successfully."` if the lead was created successfully.'
                  id:
                    type: string
                    description: 'The ID of the lead that was created.'
                example:
                  message: 'Lead created successfully.'
        400:
          description: 'Bad request.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: 'Lead already exists.'
        403:
          $ref: '#/components/responses/403'
        429:
          description: 'The maximum number of leads has been reached for this month.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: 'Max leads reached for this month.'
        500:
          $ref: '#/components/responses/500'
      security:
        - api_key: []
  /leads/{leadId}:
    get:
      description: 'Fetches details of a specific lead'
      parameters:
        - name: leadId
          in: path
          required: true
          schema:
            type: string
          description: 'The ID of the lead to fetch'
      responses:
        200:
          description: 'Lead details fetched successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  firstName:
                    type: string
                    description: 'The first name of the lead.'
                  lastName:
                    type: string
                    description: 'The last name of the lead.'
                  phone:
                    type: string
                    description: 'The phone number of the lead. This will be in the format `+15555555555`.'
                  customerProfile:
                    type: string
                    description: 'The name of the customer profile to which this lead belongs.'
                  createdAt:
                    type: string
                    format: date-time
                    description: 'The date and time when the lead was created.'
                  additionalInfo:
                    type: object
                    description: 'An optional key-value object containing additional information stored with the lead. This includes any context from when the lead was created, along with any variables that Apten has stored for the lead.'
                  hasReplied:
                    type: boolean
                    description: 'Indicates whether the lead has replied to any messages from Apten.'
                  isHot:
                    type: boolean
                    description: 'Indicates whether the lead is considered "hot" by Apten.'
                  isQualified:
                    type: boolean
                    description: 'Indicates whether the lead is considered "qualified" by Apten.'
                  isUnsubscribed:
                    type: boolean
                    description: 'Indicates whether the lead has unsubscribed from Apten.'
                  isAiOn:
                    type: boolean
                    description: 'Indicates whether Apten is turned on for the lead.'
                  tags:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: 'The name of the tag.'
                        condition:
                          type: string
                          description: 'The condition defined for the tag.'
                    description: 'An array of tags associated with the lead.'
                  summary:
                    type: string
                    description: 'A summary of the conversation with the lead.'
                example:
                  firstName: 'John'
                  lastName: 'Doe'
                  phone: '+15555555555'
                  customerProfile: 'My Customer Profile'
                  additionalInfo:
                    key1: 'value1'
                    key2: 'value2'
                  createdAt: '2024-05-17T21:09:13Z'
                  hasReplied: true
                  isHot: true
                  isQualified: false
                  isUnsubscribed: false
                  isAiOn: true
                  tags:
                    - name: 'Tag 1'
                      condition: 'Condition 1'
                    - name: 'Tag 2'
                      condition: 'Condition 2'
                  summary: 'Summary of the conversation with the lead.'
        404:
          description: 'Lead not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: 'Lead not found.'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - api_key: []
    delete:
      description: 'Deletes a specific lead'
      parameters:
        - name: leadId
          in: path
          required: true
          schema:
            type: string
          description: 'The ID of the lead to delete'
      responses:
        200:
          description: 'Lead deleted successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 'Returns `"Lead deletion initiated successfully"` when the lead deletion process begins.'
                  leadId:
                    type: string
                    description: 'The ID of the lead that was deleted.'
                example:
                  message: 'Lead deletion initiated successfully'
                  leadId: '771c3bc8-853c-4955-b4c5-2120ff6aa488'
        404:
          description: 'Lead not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: 'Resource not found: Lead'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - api_key: []
  /leads/{leadId}/messages:
    get:
      description: 'Fetches messages sent to and received from a lead'
      parameters:
        - name: leadId
          in: path
          required: true
          schema:
            type: string
          description: 'The ID of the lead to fetch messages for.'
      responses:
        200:
          description: 'Messages fetched successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      type: object
                      properties:
                        content:
                          type: object
                          properties:
                            text:
                              type: string
                              description: 'The message content.'
                        createdAt:
                          type: string
                          format: date-time
                          description: 'The date and time when the message was sent or received.'
                        owner:
                          type: string
                          description: 'The owner of the message. This can be either `"lead"` or `"user"`.'
                      description: 'An array of messages sent to and received from the lead.'
                example:
                  messages:
                    - content:
                        text: 'Hello, how can I help you?'
                      createdAt: '2024-05-17T21:09:13Z'
                      owner: 'user'
                    - content:
                        text: 'I would like to schedule a meeting.'
                      createdAt: '2024-05-17T21:09:13Z'
                      owner: 'lead'
      security:
        - api_key: []
  /leads/{leadId}/turnOff:
    post:
      description: 'Turns Apten off for a lead'
      parameters:
        - name: leadId
          in: path
          required: true
          schema:
            type: string
          description: 'The ID of the lead to turn off Apten for.'
      responses:
        200:
          description: 'Apten has successfully been turned off for the lead.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 'Returns `"Lead turned off successfully."` if Apten was turned off for the lead.'
                example:
                  message: 'Lead turned off successfully.'
        400:
          description: 'Bad request.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: 'Missing field: leadId'
        404:
          description: 'Lead with given id not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: 'Resource not found: Lead with id abcd'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - api_key: []
  /leads/{leadId}/turnOn:
    post:
      description: 'Turns Apten on for a lead'
      parameters:
        - name: leadId
          in: path
          required: true
          schema:
            type: string
          description: 'The ID of the lead to turn on Apten for.'
      responses:
        200:
          description: 'Apten has successfully been turned on for the lead.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 'Returns `"Lead turned on successfully."` if Apten was turned on for the lead.'
                example:
                  message: 'Lead turned on successfully.'
        400:
          description: 'Bad request.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: 'Missing field: leadId'
        404:
          description: 'Lead with given id not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: 'Resource not found: Lead with id abcd'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - api_key: []
  /leads/{leadId}/addContext:
    post:
      description: 'Adds context to a lead'
      parameters:
        - name: leadId
          in: path
          required: true
          schema:
            type: string
          description: 'The ID of the lead to add context to.'
      requestBody:
        description: "The lead's context and an optional command."
        content:
          application/json:
            schema:
              type: object
              properties:
                context:
                  type: string
                  description: 'Additional context to add to the lead. Good for adding free-form text context or event details.'
                additionalInfo:
                  type: object
                  description: 'An key-value object containing structured data to store with the lead. These will be stored as variables that can be accessed in the flow-chart conversation prompts.'
                command:
                  type: string
                  description: 'An optional command for Apten regarding the lead. Currently allowed commands are scheduling a follow up and sending a message.'
              example:
                context: 'The lead has scheduled a meeting with me on Monday at 2pm.'
                additionalInfo:
                  favoriteColor: 'blue'
                  favoriteFood: 'pizza'
                command: 'Schedule a follow up for next week.'
      responses:
        200:
          description: 'Context has successfully been added to the lead.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 'Returns `"Success"` if the context was added successfully.'
                example:
                  message: 'Success'
        400:
          description: 'Bad request.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        403:
          $ref: '#/components/responses/403'
        # TODO: Add 404 response for no lead/room found (currently is a 500)
        500:
          $ref: '#/components/responses/500'
      security:
        - api_key: []
  /leads/lookup:
    get:
      description: 'Looks up a lead by phone number'
      parameters:
        - name: phone
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/phoneProperty'
          description: 'The phone number of the lead to look up'
      responses:
        200:
          description: 'Lead found successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: 'The ID of the lead associated with the provided phone number.'
                required:
                  - id
              example:
                id: '1234'
        400:
          description: 'Bad request. Invalid phone number format.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: 'Invalid phone number format.'
        404:
          description: 'Lead not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: 'Lead not found.'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - api_key: []
  /leads/{leadId}/switchCustomerProfile:
    post:
      description: 'Switches the customer profile of a lead'
      parameters:
        - name: leadId
          in: path
          required: true
          schema:
            type: string
          description: 'The ID of the lead to switch the customer profile for.'
      requestBody:
        description: 'The new customer profile to switch the lead to.'
        content:
          application/json:
            schema:
              type: object
              properties:
                profile:
                  type: string
                  description: 'The name of the new customer profile to switch the lead to.'
                sendMessage:
                  type: boolean
                  description: 'Whether to send a message to the lead.'
                messageDelayHours:
                  type: integer
                  description: 'The number of hours to wait before sending the message. Takes precedence over messageDelayMins.'
                messageDelayMins:
                  type: integer
                  description: 'The number of minutes to wait before sending the message. Used as an alternative to messageDelayHours.'
                clearMemory:
                  type: boolean
                  description: "Whether to clear the AI's memory of the existing conversation with the lead. Defaults to `false`."
              required:
                - profile
      responses:
        200:
          description: 'Customer profile of lead switched successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  sendMessage:
                    type: boolean
                  messageDelayHours:
                    type: integer
                  messageDelayMins:
                    type: integer
                example:
                  message: 'Switched profile successfully.'
                  sendMessage: true
                  messageDelayHours: 0
                  messageDelayMins: 30
      security:
        - api_key: []
  /leads/{leadId}/sendMessage:
    post:
      description: 'Sends a message to a lead'
      parameters:
        - name: leadId
          in: path
          required: true
          schema:
            type: string
          description: 'The ID of the lead to send a message to.'
      requestBody:
        description: 'The message to send to the lead.'
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  description: 'The content of the message to send to the lead.'
                scheduledTime:
                  type: string
                  description: 'The date and time to schedule the message for. This should be in ISO 8601 format (e.g. 2024-05-17T21:09:13Z). If not provided, or if the scheduled time is in the past, the message will be sent immediately.'
                sendWhenOff:
                  type: boolean
                  description: 'Whether to send the message even if Apten is turned off for the lead. Defaults to `false`.'
                scheduleFollowUps:
                  type: boolean
                  description: 'Whether to schedule follow-up messages for this lead. Defaults to `false`.'
                overrideBusinessHours:
                  type: boolean
                  description: 'Whether to send the message immediately regardless of business hours. If not provided or `false`, and no scheduledTime is specified, the message will be scheduled for the next business hours. Defaults to `false`.'
              required:
                - message
      responses:
        200:
          description: 'Message sent successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 'Returns "Message sent successfully." if the message was sent.'
                example:
                  message: 'Message sent successfully.'
        400:
          description: 'Bad request.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: 'Missing required field: message'
        404:
          description: 'Lead not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: 'Lead not found.'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - api_key: []
  /leads/{leadId}/resubscribe:
    post:
      description: 'Resubscribes a lead to text messages from Apten.'
      x-notes: 'This only works if the lead has unsubscribed via Apten''s smart-unsubscribe feature, or via user-defined custom unsubscribe keywords. Leads who opt-out via a default keyword (e.g. "STOP", "UNSUBSCRIBE", "CANCEL", "END", "QUIT", and "STOP ALL") are ineligible for resubscription. This also turns Apten on for the lead.'
      parameters:
        - name: leadId
          in: path
          required: true
          schema:
            type: string
          description: 'The ID of the lead to resubscribe.'
      responses:
        200:
          description: 'Lead resubscribed successfully.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 'Returns "Lead resubscribed successfully." if the lead was resubscribed.'
                example:
                  message: 'Lead resubscribed successfully.'
        404:
          description: 'Lead not found.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: 'Resource not found: Lead with id 12345'
      security:
        - api_key: []
  /dnc/register:
    post:
      description: 'Adds a phone number to the Do Not Contact (DNC) list to prevent it from being imported.'
      requestBody:
        description: 'Phone number to add to DNC list'
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  $ref: '#/components/schemas/phoneProperty'
              required:
                - phone
              example:
                phone: '+15555555555'
        required: true
      responses:
        200:
          description: 'Phone number successfully added to DNC list'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 'Success message'
                example:
                  message: 'Phone number successfully added to DNC list'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - api_key: []

  /dnc/{phone_number}:
    get:
      description: 'Checks if a phone number is in the DNC list'
      parameters:
        - name: phone_number
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/phoneProperty'
          description: 'The phone number to check'
      responses:
        200:
          description: 'Phone number found in DNC list'
          content:
            application/json:
              schema:
                type: object
                properties:
                  phone:
                    type: string
                    description: 'The phone number in the DNC list'
                  createdAt:
                    type: string
                    format: date-time
                    description: 'The date and time when the phone number was added to the DNC list'
                example:
                  phone: '+15555555555'
                  createdAt: '2024-05-17T21:09:13Z'
        404:
          description: 'Phone number not found in DNC list'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: 'Phone number not found in DNC list'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - api_key: []

    delete:
      description: 'Removes a phone number from the DNC list'
      parameters:
        - name: phone_number
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/phoneProperty'
          description: 'The phone number to remove'
      responses:
        200:
          description: 'Phone number successfully removed from DNC list'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: 'Success message'
                example:
                  message: 'Phone number successfully removed from DNC list'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - api_key: []

components:
  responses:
    400:
      description: 'Bad Request'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: 'Invalid format for field: phone'
    403:
      description: 'Forbidden API key'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: 'Forbidden'
    500:
      description: 'Internal Server Error'
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
            example:
              message: 'Internal Server Error'
  schemas:
    phoneProperty:
      type: string
      description: >
        The phone number must begin with an area code (+) and
        can contain digits, spaces, parentheses, and hyphens
        (e.g. +1 (555) 555-5555)
    leadItem:
      type: object
      properties:
        firstName:
          type: string
          description: 'The first name of the lead.'
        lastName:
          type: string
          description: 'The last name of the lead.'
        phone:
          $ref: '#/components/schemas/phoneProperty'
        customerProfile:
          type: string
          description: 'The name of the customer profile to which this lead should belong to.'
        timeZone:
          type: string
          description: 'The timezone of the lead in tz database format (e.g. America/New_York, Europe/London).'
        email:
          type: string
          description: 'The email address of the lead. Must be a valid email format (e.g. user@domain.com).'
        additionalInfo:
          type: object
          description: 'An optional key-value object containing additional information to store with the lead.'
      required:
        - firstName
        - lastName
        - phone
        - customerProfile
      example:
        firstName: 'John'
        lastName: 'Doe'
        phone: '+15555555555'
        customerProfile: 'My Customer Profile'
        timeZone: 'America/New_York'
        email: 'example@gmail.com'
        additionalInfo:
          key1: 'value1'
          key2: 'value2'
  securitySchemes:
    api_key:
      type: apiKey
      name: x-api-key
      in: header
x-original-swagger-version: '2.0'
